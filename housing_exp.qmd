---
title: "Melbourne Exploration"
format: html
editor: visual
---

## Introduction

Before building a Shiny Application, we want to first get familiar with our data. Our dataset of choice is Melbourne housing data

## Reading in Libraries and Data

Lets read in our libraries and data

```{r}
#| warning: false
library(tidyverse)
library(ggplot2)
library(see)
```

```{r}
#| warning: false
housing_data <- read_csv(file="data/Melbourne_Housing_FULL.csv",show_col_types = FALSE)
head(housing_data)
```

## Contingency Tables

I want to create a series of one-way contingency tables to get some information on some of our variables.

Observations form the table output below:

1.  There are 351 different suburbs, and nothing seems to standout.
2.  Houses dominate the "Type" attribute with \> 23k, but there is still an ample amount of townhomes (\>3k) and units (\>7k)
3.  Metropolitan areas are more densly populated than Victoria (perhaps this represents rural areas in Melbourne)
4.  Our most popular selling method is by property sale ("S"). Other popular (\>2k count) methods include property passed in ("PI"), property sold prior ("SP"), and vendor bid ("VB")
5.  There are 388 distinct sellers with the top 7 selling over 1500 pieces of real estate

```{r}
one_way_contingency <- function(data,column_name){
  column_sym <- sym(column_name)
  return_data <- data %>%
    drop_na(!!column_sym) %>%
    group_by(!!column_sym) %>%
    summarize(count=n())
  return(return_data)
}

suburb_cntg <- one_way_contingency(housing_data,"Suburb")
house_type_cntg <- one_way_contingency(housing_data,"Type")
region_cntg <- one_way_contingency(housing_data,"Regionname")
selling_method_cntg <- one_way_contingency(housing_data,"Method")
seller_cntg <- one_way_contingency(housing_data,"SellerG") %>%
  arrange(desc(count))

suburb_cntg
house_type_cntg
region_cntg
selling_method_cntg
seller_cntg
```

Now for some two way contingency tables. Some observations include...

1.  Two, Three and Four room homes with 1-2 bathrooms seem the most popular. This makes sense
2.  At first glance, the distribution of housing types across regions seem similar
3.  Units dominate 1-2 room homes. Anything with 3+ rooms tends to be a house. This observation also makes sense

```{r}
two_way_contingency <- function(data,column_vec){
  if(length(column_vec) != 2){
    stop("You can only pass two columns when creating a two way contingency table")
  }
  column_a <- sym(column_vec[1])
  column_b <- sym(column_vec[2])
  return_data <- data %>%
    drop_na(!!column_a,!!column_b) %>%
    group_by(!!column_a,!!column_b) %>%
    summarize(count=n())
  return(return_data)
}

room_bath_cntg <- two_way_contingency(housing_data,c("Rooms","Bathroom"))
region_type_cntg <- two_way_contingency(housing_data,c("Regionname","Type"))
room_type_cntg <- two_way_contingency(housing_data,c("Rooms","Type"))

room_bath_cntg
region_type_cntg
room_type_cntg

```

## Numeric Summaries

For some our of numeric variables, we want to create some summary statistics at various levels of some of our categorical variables.

Some observations are:

1.  Houses have the highest median price of over 1M AUD followed by Townhomes at ~850k AUD
2.  Houses have the largest spread (standard deviation) in land size while townhomes have the smallest, which makes sense
3.  Median home prices increase with the number of rooms up until about 6 rooms.
4.  Median land size increases with the number of rooms up until about 6 rooms.

```{r}
summarize_numeric <- function(data,numericVar,catVar){
  if(length(numericVar) != 1 | length(catVar) != 1){
    stop("Please enter one (and one only) numeric variable and categorical variable")
  }
  numericSym <- sym(numericVar)
  catSym <- sym(catVar)

  return_data <- data %>%
    select(!!numericSym,!!catSym) %>%
    drop_na(!!numericSym,!!catSym) %>%
    group_by(!!catSym) %>%
    summarize(across(everything(), .fns = list("mean" = mean,
                                        "median" = median,
                                        "var" = var,
                                        "sd" = sd,
                                        "IQR" = IQR), .names = "{.fn}_{.col}"))
  
  return(return_data)
}

type_price_summary <- summarize_numeric(data=housing_data,numericVar="Price",catVar="Type")
rooms_price_summary <- summarize_numeric(data=housing_data,numericVar="Price",catVar="Rooms")
rooms_land_summary <- summarize_numeric(data=housing_data,numericVar="Landsize",catVar="Rooms")
type_land_summary <- summarize_numeric(data=housing_data,numericVar="Landsize",catVar="Type")

type_price_summary
rooms_price_summary
rooms_land_summary
type_land_summary



```

## Plots

Create at least six plots.
∗ At least four of these should display multivariate information via the type of graph, by utilizing
coloring, grouping, etc.
∗ All plots should have nice labels and titles.
∗ Some kind of faceting should be used somewhere.
∗ At least two plots should be a plot that we didn’t cover in class (say a heatmap or something
like that - depends on your data - lots of good examples to consider here

Scatter plot (Lot Size, Price, Type)
Scatter Plot (Rooms, Bathroom, Type)
Side-By-Side Bar (Regionname, Type)
Side-By-Side Bar (Rooms, Type)
Two-new

# Scatter Plots

We'll do two scatter plots. For the first, the lot size on the X-axis and price on the Y-axis; color coded by type of house. For the second, the number of rooms are on the X-axis and numer of bathrooms on the Y-axis; color coded by type of house.

```{r}
scatter_lot_price <- ggplot(housing_data %>%
                              mutate(Type = ifelse(Type == "h","Household",ifelse(Type =="t","Townhome","Unit/Apt")),
                                     Price = Price / 1000,
                                     Landsize = Landsize
                              ) %>%
                              drop_na(Price,Landsize,Type),
            aes(x = Landsize, y = Price, color = Type)) +
  geom_point(position="jitter") +
  xlim(0,10000) +
  ylim(0,9000) +
  labs(x = "Land Size (Meters)", y= "Price (Thousands AUD)", title = "Land Size & Price Scatter by Type of Home")

scatter_lot_building <- ggplot(housing_data %>%
                              mutate(Type = ifelse(Type == "h","Household",ifelse(Type =="t","Townhome","Unit/Apt"))
                              ) %>%
                              drop_na(Landsize,BuildingArea,Type),
            aes(x = Landsize, y = BuildingArea, color = Type)) +
  geom_point(position="jitter") +
  xlim(0,10000) +
  ylim(0,5000) +
  labs(x = "Land Size (Meters)", y= "Building Area (Meters)", title = "Land Size and Building area colored by house Type")



scatter_lot_price
scatter_lot_building
```

## Side-By-Side Bars

We'll do two stacked bar graphs. One for Region and one for Selling Method. Each will be colored by Type.

```{r}
region_name_bar <- ggplot(housing_data %>% 
                            drop_na(Regionname,Type) %>%
                            mutate(Type = ifelse(Type == "h","Household",ifelse(Type =="t","Townhome","Unit/Apt"))
                              ) %>%
                            filter(Regionname != '#N/A')
                            ,aes(x = Regionname,fill=Type)) +
  geom_bar() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(x = "Regionname", y = "Real Estate Sold", title = "Number of Home Sales by Region")

sell_type_bar <- ggplot(housing_data %>% 
                            drop_na(Method,Type) %>%
                            mutate(Type = ifelse(Type == "h","Household",ifelse(Type =="t","Townhome","Unit/Apt"))
                              )
                            ,aes(x = Method,fill=Type)) +
  geom_bar() +
  labs(x = "Selling Method", y = "Real Estate Sold", title = "Number of Home Sales by Selling Method")

region_name_bar
sell_type_bar


```
## Other plots

Aside from basic plots, we can also do some pretty cool ones. 

We have one here that uses a half-violin plot from the `see` library to visualize the distribution of price across Regions. The other is a correlation matrix from the `correlation` library where we're looking at the correlation among a few of our true numeric variables.

```{r}
region_price_half_vio <- ggplot(housing_data %>% drop_na(Regionname,Price) %>% mutate(Price = Price/1000), aes(x = Regionname, y = Price, fill = Regionname)) +
  geom_violindot(fill_dots = "black") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(x = "Regionname", y = "Price", title = "Number of Home Sales by Region")


correlations <- summary(correlation::correlation(housing_data %>% select(Rooms, Bathroom, Landsize, Price)))

correlation_plot <- plot(results, show_data = "points")

region_price_half_vio
correlation_plot
```

